HTTP MESSAGE EXAMPLES
=====================

VALID REQUEST EXAMPLES
-----------------------

Example 1: Simple GET Request
GET /index.html HTTP/1.1\r\n
Host: www.example.com\r\n
User-Agent: Mozilla/5.0\r\n
Accept: text/html\r\n
\r\n

Example 2: POST Request with Content-Length
POST /api/users HTTP/1.1\r\n
Host: api.example.com\r\n
Content-Type: application/json\r\n
Content-Length: 45\r\n
\r\n
{"name":"John","email":"john@example.com"}

Example 3: POST Request with Chunked Transfer
POST /upload HTTP/1.1\r\n
Host: upload.example.com\r\n
Transfer-Encoding: chunked\r\n
Content-Type: text/plain\r\n
\r\n
1a\r\n
This is the first chunk\r\n
12\r\n
Second chunk here\r\n
0\r\n
\r\n

Example 4: Request with Connection Close
DELETE /resource/123 HTTP/1.1\r\n
Host: api.example.com\r\n
Authorization: Bearer token123\r\n
Connection: close\r\n
\r\n

VALID RESPONSE EXAMPLES
------------------------

Example 1: Successful Response with Body
HTTP/1.1 200 OK\r\n
Content-Type: text/html\r\n
Content-Length: 13\r\n
\r\n
Hello, World!

Example 2: Error Response
HTTP/1.1 404 Not Found\r\n
Content-Type: text/plain\r\n
Content-Length: 9\r\n
\r\n
Not found

Example 3: Response with Connection Close
HTTP/1.1 500 Internal Server Error\r\n
Content-Type: text/plain\r\n
Content-Length: 21\r\n
Connection: close\r\n
\r\n
Internal server error

INVALID EXAMPLES (What to Reject)
----------------------------------

Invalid 1: Unsupported Method → 501 Not Implemented
PUT /resource HTTP/1.1\r\n
Host: example.com\r\n
\r\n

Invalid 2: Missing Host Header → 400 Bad Request
GET /index.html HTTP/1.1\r\n
User-Agent: TestClient\r\n
\r\n

Invalid 3: Invalid Header Format → 400 Bad Request
GET /test HTTP/1.1\r\n
Host: example.com\r\n
Invalid Header Without Colon\r\n
\r\n

Invalid 4: Malformed Request Line → 400 Bad Request
GET/missing/spaces HTTP/1.1\r\n
Host: example.com\r\n
\r\n

Invalid 5: Whitespace Before Colon → 400 Bad Request
GET /test HTTP/1.1\r\n
Host: example.com\r\n
Content-Type : text/html\r\n
\r\n

Invalid 6: Folded Header (Obsolete) → 400 Bad Request
GET /test HTTP/1.1\r\n
Host: example.com\r\n
Long-Header: first part\r\n
 continued on next line\r\n
\r\n

PARSING IMPLEMENTATION CHECKLIST
=================================

Request-Line:
□ Validate method (GET/POST/DELETE only) → 501 if unsupported
	Checked but sending 400 - Bad Request
□ Check URI length (max 8000 bytes) → 414 if too long
	Checked but sending 400 - Bad Request
□ Validate HTTP version format
	Only accepts HTTP/1.0 or HTTP/1.0
□ Return 400 for invalid request-line format

Headers:
□ Validate field name characters (tchar only)
	Done
□ Check for colon separator
	Done
□ Trim OWS from field values
	Done
□ Reject folded headers (or unfold)
□ Handle duplicate headers appropriately
	Done - it it's "Host" it returns 400 and if its another, it appends to the previous value
□ Validate required headers (Host for requests)
	Done
□ Return 400 for malformed headers
□ Ignore unknown headers
	Done

Message Body:
□ Check if body allowed for this message type
□ Process Transfer-Encoding before Content-Length
□ Validate Content-Length format and consistency
□ Handle unsupported Transfer-Encoding → 501
□ Implement chunked transfer decoding

Connection:
□ Check Connection header for "close"
□ Filter hop-by-hop headers
□ Handle connection timeouts/interruptions

Error Responses:
□ 400 Bad Request: malformed syntax
□ 414 URI Too Long: request-target too long
□ 501 Not Implemented: unsupported method/encoding

COMMON PARSING PITFALLS
=======================
1. Using LF instead of CRLF for line endings
2. Not trimming OWS from header values
3. Case-sensitive header name comparison
4. Processing Content-Length when Transfer-Encoding present
5. Forwarding hop-by-hop headers
6. Not validating required headers (Host)
7. Accepting invalid characters in field names